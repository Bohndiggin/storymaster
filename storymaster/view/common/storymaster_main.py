# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'storymaster_main.ui'
##
## Created by: Qt User Interface Compiler version 6.9.1
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QApplication, QButtonGroup, QGraphicsView, QHBoxLayout,
    QMainWindow, QMenu, QMenuBar, QPushButton,
    QSizePolicy, QSpacerItem, QStackedWidget, QStatusBar,
    QToolBar, QVBoxLayout, QWidget)

class Ui_StorymasterMainWindow(object):
    def setupUi(self, StorymasterMainWindow):
        if not StorymasterMainWindow.objectName():
            StorymasterMainWindow.setObjectName(u"StorymasterMainWindow")
        StorymasterMainWindow.resize(1280, 720)
        self.actionNewStoryline = QAction(StorymasterMainWindow)
        self.actionNewStoryline.setObjectName(u"actionNewStoryline")
        self.actionNewSetting = QAction(StorymasterMainWindow)
        self.actionNewSetting.setObjectName(u"actionNewSetting")
        self.actionSwitchStoryline = QAction(StorymasterMainWindow)
        self.actionSwitchStoryline.setObjectName(u"actionSwitchStoryline")
        self.actionSwitchSetting = QAction(StorymasterMainWindow)
        self.actionSwitchSetting.setObjectName(u"actionSwitchSetting")
        self.actionNewPlot = QAction(StorymasterMainWindow)
        self.actionNewPlot.setObjectName(u"actionNewPlot")
        self.actionOpen = QAction(StorymasterMainWindow)
        self.actionOpen.setObjectName(u"actionOpen")
        self.actionSwitchPlot = QAction(StorymasterMainWindow)
        self.actionSwitchPlot.setObjectName(u"actionSwitchPlot")
        self.actionDeletePlot = QAction(StorymasterMainWindow)
        self.actionDeletePlot.setObjectName(u"actionDeletePlot")
        self.actionExit = QAction(StorymasterMainWindow)
        self.actionExit.setObjectName(u"actionExit")
        self.actionUndo = QAction(StorymasterMainWindow)
        self.actionUndo.setObjectName(u"actionUndo")
        self.actionRedo = QAction(StorymasterMainWindow)
        self.actionRedo.setObjectName(u"actionRedo")
        self.actionAbout = QAction(StorymasterMainWindow)
        self.actionAbout.setObjectName(u"actionAbout")
        self.actionAddNode = QAction(StorymasterMainWindow)
        self.actionAddNode.setObjectName(u"actionAddNode")
        self.actionNewUser = QAction(StorymasterMainWindow)
        self.actionNewUser.setObjectName(u"actionNewUser")
        self.actionSwitchUser = QAction(StorymasterMainWindow)
        self.actionSwitchUser.setObjectName(u"actionSwitchUser")
        self.actionManageUsers = QAction(StorymasterMainWindow)
        self.actionManageUsers.setObjectName(u"actionManageUsers")
        self.actionCreateBackup = QAction(StorymasterMainWindow)
        self.actionCreateBackup.setObjectName(u"actionCreateBackup")
        self.actionDatabaseManager = QAction(StorymasterMainWindow)
        self.actionDatabaseManager.setObjectName(u"actionDatabaseManager")
        self.actionManageSetting = QAction(StorymasterMainWindow)
        self.actionManageSetting.setObjectName(u"actionManageSetting")
        self.actionImportFromJSON = QAction(StorymasterMainWindow)
        self.actionImportFromJSON.setObjectName(u"actionImportFromJSON")
        self.centralWidget = QWidget(StorymasterMainWindow)
        self.centralWidget.setObjectName(u"centralWidget")
        self.verticalLayout = QVBoxLayout(self.centralWidget)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.pageStack = QStackedWidget(self.centralWidget)
        self.pageStack.setObjectName(u"pageStack")
        self.litographerPage = QWidget()
        self.litographerPage.setObjectName(u"litographerPage")
        self.verticalLayout_2 = QVBoxLayout(self.litographerPage)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName(u"verticalLayout_2")
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.litographerToolbar = QToolBar(self.litographerPage)
        self.litographerToolbar.setObjectName(u"litographerToolbar")

        self.verticalLayout_2.addWidget(self.litographerToolbar)

        self.nodeGraphView = QGraphicsView(self.litographerPage)
        self.nodeGraphView.setObjectName(u"nodeGraphView")

        self.verticalLayout_2.addWidget(self.nodeGraphView)

        self.pageStack.addWidget(self.litographerPage)
        self.newLorekeeperPage = QWidget()
        self.newLorekeeperPage.setObjectName(u"newLorekeeperPage")
        self.pageStack.addWidget(self.newLorekeeperPage)
        self.characterArcsPage = QWidget()
        self.characterArcsPage.setObjectName(u"characterArcsPage")
        self.characterArcsLayout = QVBoxLayout(self.characterArcsPage)
        self.characterArcsLayout.setObjectName(u"characterArcsLayout")
        self.characterArcsContainer = QWidget(self.characterArcsPage)
        self.characterArcsContainer.setObjectName(u"characterArcsContainer")

        self.characterArcsLayout.addWidget(self.characterArcsContainer)

        self.pageStack.addWidget(self.characterArcsPage)

        self.verticalLayout.addWidget(self.pageStack)

        self.bottomNavBar = QWidget(self.centralWidget)
        self.bottomNavBar.setObjectName(u"bottomNavBar")
        self.bottomNavBar.setMinimumSize(QSize(0, 40))
        self.bottomNavBar.setMaximumSize(QSize(16777215, 40))
        self.horizontalLayout = QHBoxLayout(self.bottomNavBar)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName(u"horizontalLayout")
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalSpacer = QSpacerItem(40, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum)

        self.horizontalLayout.addItem(self.horizontalSpacer)

        self.litographerNavButton = QPushButton(self.bottomNavBar)
        self.navButtonGroup = QButtonGroup(StorymasterMainWindow)
        self.navButtonGroup.setObjectName(u"navButtonGroup")
        self.navButtonGroup.addButton(self.litographerNavButton)
        self.litographerNavButton.setObjectName(u"litographerNavButton")
        self.litographerNavButton.setCheckable(True)
        self.litographerNavButton.setChecked(True)
        self.litographerNavButton.setAutoExclusive(True)

        self.horizontalLayout.addWidget(self.litographerNavButton)

        self.lorekeeperNavButton = QPushButton(self.bottomNavBar)
        self.navButtonGroup.addButton(self.lorekeeperNavButton)
        self.lorekeeperNavButton.setObjectName(u"lorekeeperNavButton")
        self.lorekeeperNavButton.setCheckable(True)
        self.lorekeeperNavButton.setAutoExclusive(True)

        self.horizontalLayout.addWidget(self.lorekeeperNavButton)

        self.characterArcsNavButton = QPushButton(self.bottomNavBar)
        self.navButtonGroup.addButton(self.characterArcsNavButton)
        self.characterArcsNavButton.setObjectName(u"characterArcsNavButton")
        self.characterArcsNavButton.setCheckable(True)
        self.characterArcsNavButton.setAutoExclusive(True)

        self.horizontalLayout.addWidget(self.characterArcsNavButton)

        self.horizontalSpacer_2 = QSpacerItem(40, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum)

        self.horizontalLayout.addItem(self.horizontalSpacer_2)


        self.verticalLayout.addWidget(self.bottomNavBar)

        StorymasterMainWindow.setCentralWidget(self.centralWidget)
        self.menubar = QMenuBar(StorymasterMainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 1280, 25))
        self.menuFile = QMenu(self.menubar)
        self.menuFile.setObjectName(u"menuFile")
        self.menuStoryline = QMenu(self.menubar)
        self.menuStoryline.setObjectName(u"menuStoryline")
        self.menuSetting = QMenu(self.menubar)
        self.menuSetting.setObjectName(u"menuSetting")
        self.menuUser = QMenu(self.menubar)
        self.menuUser.setObjectName(u"menuUser")
        self.menuEdit = QMenu(self.menubar)
        self.menuEdit.setObjectName(u"menuEdit")
        self.menuHelp = QMenu(self.menubar)
        self.menuHelp.setObjectName(u"menuHelp")
        StorymasterMainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(StorymasterMainWindow)
        self.statusbar.setObjectName(u"statusbar")
        StorymasterMainWindow.setStatusBar(self.statusbar)

        self.litographerToolbar.addAction(self.actionAddNode)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuStoryline.menuAction())
        self.menubar.addAction(self.menuSetting.menuAction())
        self.menubar.addAction(self.menuUser.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionImportFromJSON)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionCreateBackup)
        self.menuFile.addAction(self.actionDatabaseManager)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuStoryline.addAction(self.actionNewStoryline)
        self.menuStoryline.addAction(self.actionSwitchStoryline)
        self.menuSetting.addAction(self.actionNewSetting)
        self.menuSetting.addAction(self.actionSwitchSetting)
        self.menuSetting.addSeparator()
        self.menuSetting.addAction(self.actionManageSetting)
        self.menuUser.addAction(self.actionNewUser)
        self.menuUser.addAction(self.actionSwitchUser)
        self.menuUser.addSeparator()
        self.menuUser.addAction(self.actionManageUsers)
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuHelp.addAction(self.actionAbout)

        self.retranslateUi(StorymasterMainWindow)

        self.pageStack.setCurrentIndex(0)


        QMetaObject.connectSlotsByName(StorymasterMainWindow)
    # setupUi

    def retranslateUi(self, StorymasterMainWindow):
        StorymasterMainWindow.setWindowTitle(QCoreApplication.translate("StorymasterMainWindow", u"Storymaster", None))
        self.actionNewStoryline.setText(QCoreApplication.translate("StorymasterMainWindow", u"New Storyline", None))
#if QT_CONFIG(tooltip)
        self.actionNewStoryline.setToolTip(QCoreApplication.translate("StorymasterMainWindow", u"Create a new storyline", None))
#endif // QT_CONFIG(tooltip)
        self.actionNewSetting.setText(QCoreApplication.translate("StorymasterMainWindow", u"New Setting", None))
#if QT_CONFIG(tooltip)
        self.actionNewSetting.setToolTip(QCoreApplication.translate("StorymasterMainWindow", u"Create a new setting", None))
#endif // QT_CONFIG(tooltip)
        self.actionSwitchStoryline.setText(QCoreApplication.translate("StorymasterMainWindow", u"Switch Storyline", None))
#if QT_CONFIG(tooltip)
        self.actionSwitchStoryline.setToolTip(QCoreApplication.translate("StorymasterMainWindow", u"Switch to a different storyline", None))
#endif // QT_CONFIG(tooltip)
        self.actionSwitchSetting.setText(QCoreApplication.translate("StorymasterMainWindow", u"Switch Setting", None))
#if QT_CONFIG(tooltip)
        self.actionSwitchSetting.setToolTip(QCoreApplication.translate("StorymasterMainWindow", u"Switch to a different setting", None))
#endif // QT_CONFIG(tooltip)
        self.actionNewPlot.setText(QCoreApplication.translate("StorymasterMainWindow", u"New Plot", None))
#if QT_CONFIG(tooltip)
        self.actionNewPlot.setToolTip(QCoreApplication.translate("StorymasterMainWindow", u"Create a new plot in the current storyline", None))
#endif // QT_CONFIG(tooltip)
        self.actionOpen.setText(QCoreApplication.translate("StorymasterMainWindow", u"Open Storyline", None))
#if QT_CONFIG(tooltip)
        self.actionOpen.setToolTip(QCoreApplication.translate("StorymasterMainWindow", u"Open a different storyline", None))
#endif // QT_CONFIG(tooltip)
        self.actionSwitchPlot.setText(QCoreApplication.translate("StorymasterMainWindow", u"Switch Plot", None))
#if QT_CONFIG(tooltip)
        self.actionSwitchPlot.setToolTip(QCoreApplication.translate("StorymasterMainWindow", u"Switch to a different plot in the current storyline", None))
#endif // QT_CONFIG(tooltip)
        self.actionDeletePlot.setText(QCoreApplication.translate("StorymasterMainWindow", u"Delete Plot", None))
#if QT_CONFIG(tooltip)
        self.actionDeletePlot.setToolTip(QCoreApplication.translate("StorymasterMainWindow", u"Delete the current plot", None))
#endif // QT_CONFIG(tooltip)
        self.actionExit.setText(QCoreApplication.translate("StorymasterMainWindow", u"Exit", None))
        self.actionUndo.setText(QCoreApplication.translate("StorymasterMainWindow", u"Undo", None))
        self.actionRedo.setText(QCoreApplication.translate("StorymasterMainWindow", u"Redo", None))
        self.actionAbout.setText(QCoreApplication.translate("StorymasterMainWindow", u"About", None))
        self.actionAddNode.setText(QCoreApplication.translate("StorymasterMainWindow", u"Add Node", None))
#if QT_CONFIG(tooltip)
        self.actionAddNode.setToolTip(QCoreApplication.translate("StorymasterMainWindow", u"Add a new node to the canvas", None))
#endif // QT_CONFIG(tooltip)
        self.actionNewUser.setText(QCoreApplication.translate("StorymasterMainWindow", u"New User", None))
#if QT_CONFIG(tooltip)
        self.actionNewUser.setToolTip(QCoreApplication.translate("StorymasterMainWindow", u"Create a new user", None))
#endif // QT_CONFIG(tooltip)
        self.actionSwitchUser.setText(QCoreApplication.translate("StorymasterMainWindow", u"Switch User", None))
#if QT_CONFIG(tooltip)
        self.actionSwitchUser.setToolTip(QCoreApplication.translate("StorymasterMainWindow", u"Switch to a different user", None))
#endif // QT_CONFIG(tooltip)
        self.actionManageUsers.setText(QCoreApplication.translate("StorymasterMainWindow", u"Manage Users", None))
#if QT_CONFIG(tooltip)
        self.actionManageUsers.setToolTip(QCoreApplication.translate("StorymasterMainWindow", u"Manage users (add, switch, delete)", None))
#endif // QT_CONFIG(tooltip)
        self.actionCreateBackup.setText(QCoreApplication.translate("StorymasterMainWindow", u"Create Backup", None))
#if QT_CONFIG(tooltip)
        self.actionCreateBackup.setToolTip(QCoreApplication.translate("StorymasterMainWindow", u"Create a manual backup of the database", None))
#endif // QT_CONFIG(tooltip)
        self.actionDatabaseManager.setText(QCoreApplication.translate("StorymasterMainWindow", u"Database Manager", None))
#if QT_CONFIG(tooltip)
        self.actionDatabaseManager.setToolTip(QCoreApplication.translate("StorymasterMainWindow", u"Manage databases and backups", None))
#endif // QT_CONFIG(tooltip)
        self.actionManageSetting.setText(QCoreApplication.translate("StorymasterMainWindow", u"Import Lore Packages", None))
#if QT_CONFIG(tooltip)
        self.actionManageSetting.setToolTip(QCoreApplication.translate("StorymasterMainWindow", u"Import world building packages into current setting", None))
#endif // QT_CONFIG(tooltip)
        self.actionImportFromJSON.setText(QCoreApplication.translate("StorymasterMainWindow", u"Import from JSON", None))
#if QT_CONFIG(tooltip)
        self.actionImportFromJSON.setToolTip(QCoreApplication.translate("StorymasterMainWindow", u"Import storyline data from JSON file", None))
#endif // QT_CONFIG(tooltip)
        self.litographerToolbar.setWindowTitle(QCoreApplication.translate("StorymasterMainWindow", u"toolBar", None))
        self.litographerNavButton.setText(QCoreApplication.translate("StorymasterMainWindow", u"Litographer", None))
        self.lorekeeperNavButton.setText(QCoreApplication.translate("StorymasterMainWindow", u"Lorekeeper", None))
        self.characterArcsNavButton.setText(QCoreApplication.translate("StorymasterMainWindow", u"Character Arcs", None))
        self.menuFile.setTitle(QCoreApplication.translate("StorymasterMainWindow", u"File", None))
        self.menuStoryline.setTitle(QCoreApplication.translate("StorymasterMainWindow", u"Storyline", None))
        self.menuSetting.setTitle(QCoreApplication.translate("StorymasterMainWindow", u"Setting", None))
        self.menuUser.setTitle(QCoreApplication.translate("StorymasterMainWindow", u"User", None))
        self.menuEdit.setTitle(QCoreApplication.translate("StorymasterMainWindow", u"Edit", None))
        self.menuHelp.setTitle(QCoreApplication.translate("StorymasterMainWindow", u"Help", None))
    # retranslateUi

