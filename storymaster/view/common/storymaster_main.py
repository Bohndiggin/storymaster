# Form implementation generated from reading ui file 'storymaster/view/common/storymaster_main.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_StorymasterMainWindow(object):
    def setupUi(self, StorymasterMainWindow):
        StorymasterMainWindow.setObjectName("StorymasterMainWindow")
        StorymasterMainWindow.resize(1280, 720)
        self.centralWidget = QtWidgets.QWidget(parent=StorymasterMainWindow)
        self.centralWidget.setObjectName("centralWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pageStack = QtWidgets.QStackedWidget(parent=self.centralWidget)
        self.pageStack.setObjectName("pageStack")
        self.litographerPage = QtWidgets.QWidget()
        self.litographerPage.setObjectName("litographerPage")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.litographerPage)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.litographerToolbar = QtWidgets.QToolBar(parent=self.litographerPage)
        self.litographerToolbar.setObjectName("litographerToolbar")
        self.verticalLayout_2.addWidget(self.litographerToolbar)
        self.nodeGraphView = QtWidgets.QGraphicsView(parent=self.litographerPage)
        self.nodeGraphView.setObjectName("nodeGraphView")
        self.verticalLayout_2.addWidget(self.nodeGraphView)
        self.pageStack.addWidget(self.litographerPage)
        self.newLorekeeperPage = QtWidgets.QWidget()
        self.newLorekeeperPage.setObjectName("newLorekeeperPage")
        self.pageStack.addWidget(self.newLorekeeperPage)
        self.characterArcsPage = QtWidgets.QWidget()
        self.characterArcsPage.setObjectName("characterArcsPage")
        self.characterArcsLayout = QtWidgets.QVBoxLayout(self.characterArcsPage)
        self.characterArcsLayout.setObjectName("characterArcsLayout")
        self.characterArcsContainer = QtWidgets.QWidget(parent=self.characterArcsPage)
        self.characterArcsContainer.setObjectName("characterArcsContainer")
        self.characterArcsLayout.addWidget(self.characterArcsContainer)
        self.pageStack.addWidget(self.characterArcsPage)
        self.verticalLayout.addWidget(self.pageStack)
        self.bottomNavBar = QtWidgets.QWidget(parent=self.centralWidget)
        self.bottomNavBar.setMinimumSize(QtCore.QSize(0, 40))
        self.bottomNavBar.setMaximumSize(QtCore.QSize(16777215, 40))
        self.bottomNavBar.setObjectName("bottomNavBar")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.bottomNavBar)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(
            40,
            20,
            QtWidgets.QSizePolicy.Policy.Expanding,
            QtWidgets.QSizePolicy.Policy.Minimum,
        )
        self.horizontalLayout.addItem(spacerItem)
        self.litographerNavButton = QtWidgets.QPushButton(parent=self.bottomNavBar)
        self.litographerNavButton.setCheckable(True)
        self.litographerNavButton.setChecked(True)
        self.litographerNavButton.setAutoExclusive(True)
        self.litographerNavButton.setObjectName("litographerNavButton")
        self.navButtonGroup = QtWidgets.QButtonGroup(StorymasterMainWindow)
        self.navButtonGroup.setObjectName("navButtonGroup")
        self.navButtonGroup.addButton(self.litographerNavButton)
        self.horizontalLayout.addWidget(self.litographerNavButton)
        self.lorekeeperNavButton = QtWidgets.QPushButton(parent=self.bottomNavBar)
        self.lorekeeperNavButton.setCheckable(True)
        self.lorekeeperNavButton.setAutoExclusive(True)
        self.lorekeeperNavButton.setObjectName("lorekeeperNavButton")
        self.navButtonGroup.addButton(self.lorekeeperNavButton)
        self.horizontalLayout.addWidget(self.lorekeeperNavButton)
        self.characterArcsNavButton = QtWidgets.QPushButton(parent=self.bottomNavBar)
        self.characterArcsNavButton.setCheckable(True)
        self.characterArcsNavButton.setAutoExclusive(True)
        self.characterArcsNavButton.setObjectName("characterArcsNavButton")
        self.navButtonGroup.addButton(self.characterArcsNavButton)
        self.horizontalLayout.addWidget(self.characterArcsNavButton)
        spacerItem1 = QtWidgets.QSpacerItem(
            40,
            20,
            QtWidgets.QSizePolicy.Policy.Expanding,
            QtWidgets.QSizePolicy.Policy.Minimum,
        )
        self.horizontalLayout.addItem(spacerItem1)
        self.verticalLayout.addWidget(self.bottomNavBar)
        StorymasterMainWindow.setCentralWidget(self.centralWidget)
        self.menubar = QtWidgets.QMenuBar(parent=StorymasterMainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 25))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(parent=self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuStoryline = QtWidgets.QMenu(parent=self.menubar)
        self.menuStoryline.setObjectName("menuStoryline")
        self.menuSetting = QtWidgets.QMenu(parent=self.menubar)
        self.menuSetting.setObjectName("menuSetting")
        self.menuUser = QtWidgets.QMenu(parent=self.menubar)
        self.menuUser.setObjectName("menuUser")
        self.menuEdit = QtWidgets.QMenu(parent=self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuHelp = QtWidgets.QMenu(parent=self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        StorymasterMainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=StorymasterMainWindow)
        self.statusbar.setObjectName("statusbar")
        StorymasterMainWindow.setStatusBar(self.statusbar)
        self.actionNewStoryline = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionNewStoryline.setObjectName("actionNewStoryline")
        self.actionNewSetting = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionNewSetting.setObjectName("actionNewSetting")
        self.actionSwitchStoryline = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionSwitchStoryline.setObjectName("actionSwitchStoryline")
        self.actionSwitchSetting = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionSwitchSetting.setObjectName("actionSwitchSetting")
        self.actionNewPlot = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionNewPlot.setObjectName("actionNewPlot")
        self.actionOpen = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSwitchPlot = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionSwitchPlot.setObjectName("actionSwitchPlot")
        self.actionDeletePlot = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionDeletePlot.setObjectName("actionDeletePlot")
        self.actionExit = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionUndo = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionUndo.setObjectName("actionUndo")
        self.actionRedo = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionRedo.setObjectName("actionRedo")
        self.actionAbout = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionAddNode = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionAddNode.setObjectName("actionAddNode")
        self.actionNewUser = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionNewUser.setObjectName("actionNewUser")
        self.actionSwitchUser = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionSwitchUser.setObjectName("actionSwitchUser")
        self.actionManageUsers = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionManageUsers.setObjectName("actionManageUsers")
        self.actionCreateBackup = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionCreateBackup.setObjectName("actionCreateBackup")
        self.actionDatabaseManager = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionDatabaseManager.setObjectName("actionDatabaseManager")
        self.actionManageSetting = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionManageSetting.setObjectName("actionManageSetting")
        self.actionImportFromJSON = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionImportFromJSON.setObjectName("actionImportFromJSON")
        self.actionExportSettingToJSON = QtGui.QAction(parent=StorymasterMainWindow)
        self.actionExportSettingToJSON.setObjectName("actionExportSettingToJSON")
        self.litographerToolbar.addAction(self.actionAddNode)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionImportFromJSON)
        self.menuFile.addAction(self.actionExportSettingToJSON)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionCreateBackup)
        self.menuFile.addAction(self.actionDatabaseManager)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuStoryline.addAction(self.actionNewStoryline)
        self.menuStoryline.addAction(self.actionSwitchStoryline)
        self.menuSetting.addAction(self.actionNewSetting)
        self.menuSetting.addAction(self.actionSwitchSetting)
        self.menuSetting.addSeparator()
        self.menuSetting.addAction(self.actionManageSetting)
        self.menuUser.addAction(self.actionNewUser)
        self.menuUser.addAction(self.actionSwitchUser)
        self.menuUser.addSeparator()
        self.menuUser.addAction(self.actionManageUsers)
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuHelp.addAction(self.actionAbout)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuStoryline.menuAction())
        self.menubar.addAction(self.menuSetting.menuAction())
        self.menubar.addAction(self.menuUser.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(StorymasterMainWindow)
        self.pageStack.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(StorymasterMainWindow)

    def retranslateUi(self, StorymasterMainWindow):
        _translate = QtCore.QCoreApplication.translate
        StorymasterMainWindow.setWindowTitle(
            _translate("StorymasterMainWindow", "Storymaster")
        )
        self.litographerToolbar.setWindowTitle(
            _translate("StorymasterMainWindow", "toolBar")
        )
        self.litographerNavButton.setText(
            _translate("StorymasterMainWindow", "Litographer")
        )
        self.lorekeeperNavButton.setText(
            _translate("StorymasterMainWindow", "Lorekeeper")
        )
        self.characterArcsNavButton.setText(
            _translate("StorymasterMainWindow", "Character Arcs")
        )
        self.menuFile.setTitle(_translate("StorymasterMainWindow", "File"))
        self.menuStoryline.setTitle(_translate("StorymasterMainWindow", "Storyline"))
        self.menuSetting.setTitle(_translate("StorymasterMainWindow", "Setting"))
        self.menuUser.setTitle(_translate("StorymasterMainWindow", "User"))
        self.menuEdit.setTitle(_translate("StorymasterMainWindow", "Edit"))
        self.menuHelp.setTitle(_translate("StorymasterMainWindow", "Help"))
        self.actionNewStoryline.setText(
            _translate("StorymasterMainWindow", "New Storyline")
        )
        self.actionNewStoryline.setToolTip(
            _translate("StorymasterMainWindow", "Create a new storyline")
        )
        self.actionNewSetting.setText(
            _translate("StorymasterMainWindow", "New Setting")
        )
        self.actionNewSetting.setToolTip(
            _translate("StorymasterMainWindow", "Create a new setting")
        )
        self.actionSwitchStoryline.setText(
            _translate("StorymasterMainWindow", "Switch Storyline")
        )
        self.actionSwitchStoryline.setToolTip(
            _translate("StorymasterMainWindow", "Switch to a different storyline")
        )
        self.actionSwitchSetting.setText(
            _translate("StorymasterMainWindow", "Switch Setting")
        )
        self.actionSwitchSetting.setToolTip(
            _translate("StorymasterMainWindow", "Switch to a different setting")
        )
        self.actionNewPlot.setText(_translate("StorymasterMainWindow", "New Plot"))
        self.actionNewPlot.setToolTip(
            _translate(
                "StorymasterMainWindow", "Create a new plot in the current storyline"
            )
        )
        self.actionOpen.setText(_translate("StorymasterMainWindow", "Open Storyline"))
        self.actionOpen.setToolTip(
            _translate("StorymasterMainWindow", "Open a different storyline")
        )
        self.actionSwitchPlot.setText(
            _translate("StorymasterMainWindow", "Switch Plot")
        )
        self.actionSwitchPlot.setToolTip(
            _translate(
                "StorymasterMainWindow",
                "Switch to a different plot in the current storyline",
            )
        )
        self.actionDeletePlot.setText(
            _translate("StorymasterMainWindow", "Delete Plot")
        )
        self.actionDeletePlot.setToolTip(
            _translate("StorymasterMainWindow", "Delete the current plot")
        )
        self.actionExit.setText(_translate("StorymasterMainWindow", "Exit"))
        self.actionUndo.setText(_translate("StorymasterMainWindow", "Undo"))
        self.actionRedo.setText(_translate("StorymasterMainWindow", "Redo"))
        self.actionAbout.setText(_translate("StorymasterMainWindow", "About"))
        self.actionAddNode.setText(_translate("StorymasterMainWindow", "Add Node"))
        self.actionAddNode.setToolTip(
            _translate("StorymasterMainWindow", "Add a new node to the canvas")
        )
        self.actionNewUser.setText(_translate("StorymasterMainWindow", "New User"))
        self.actionNewUser.setToolTip(
            _translate("StorymasterMainWindow", "Create a new user")
        )
        self.actionSwitchUser.setText(
            _translate("StorymasterMainWindow", "Switch User")
        )
        self.actionSwitchUser.setToolTip(
            _translate("StorymasterMainWindow", "Switch to a different user")
        )
        self.actionManageUsers.setText(
            _translate("StorymasterMainWindow", "Manage Users")
        )
        self.actionManageUsers.setToolTip(
            _translate("StorymasterMainWindow", "Manage users (add, switch, delete)")
        )
        self.actionCreateBackup.setText(
            _translate("StorymasterMainWindow", "Create Backup")
        )
        self.actionCreateBackup.setToolTip(
            _translate(
                "StorymasterMainWindow", "Create a manual backup of the database"
            )
        )
        self.actionDatabaseManager.setText(
            _translate("StorymasterMainWindow", "Database Manager")
        )
        self.actionDatabaseManager.setToolTip(
            _translate("StorymasterMainWindow", "Manage databases and backups")
        )
        self.actionManageSetting.setText(
            _translate("StorymasterMainWindow", "Import Lore Packages")
        )
        self.actionManageSetting.setToolTip(
            _translate(
                "StorymasterMainWindow",
                "Import world building packages into current setting",
            )
        )
        self.actionImportFromJSON.setText(
            _translate("StorymasterMainWindow", "Import from JSON")
        )
        self.actionImportFromJSON.setToolTip(
            _translate("StorymasterMainWindow", "Import storyline data from JSON file")
        )
        self.actionExportSettingToJSON.setText(
            _translate("StorymasterMainWindow", "Export Setting to JSON")
        )
        self.actionExportSettingToJSON.setToolTip(
            _translate(
                "StorymasterMainWindow",
                "Export current setting and all world-building data to JSON file",
            )
        )
